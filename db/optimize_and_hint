MySQL의 쿼리를 최적으로 실행 하도록 계획을 수립하는게 옵티마이저다.
실행 계획을 통해서 확인하자.

쿼리 실행 절차.
1. 주어진 SQL 문장을 잘게 쪼개서 MySQL 서버가 이해 가능하도록 분리(파스 트리)한다.
2. SQL의 파싱 정보를 확인하면서 어떻게 실행할지(어떤 테이블 읽고 어떤 인덱스 선택할지) 선택한다.
3. 2번에서 결정된 실행을 통해 스토리지 엔진으로부터 데이터 가져온다.

2번 단계에서 다음과 같은 내용 처리
1. 불필요한 조건 제거 및 연산의 단순화
2. 여러 테이블의 조인 순서를 선택
--> 순서에 따라서 걸러지는 데이터 차이가 큼
3. 각 테이블에 사용된 조건과 통계정보를 활용해 인덱스 선택
4. 가져온 레코드들을 임시 테이블에 넣고 다시 한번 가공해야 하는지 결정
5. 그 외에 더 있음

옵티 마이저 종류
1. 비용 기반 최적화
--> 쿼리를 처리하기 위한 여러 가지 방법을 만들고 각 방법의 비용을 계산해서 선택, 통계 정보 활용함
2. 규칙 기반 최적화
--> 옵티마이저에 내장된 우선순위에 따라 실행 계획 수립. 휴리스틱하기 때문에 잘 안씀

풀 테이블 스캔하는 주된 이유
1. 레코드 건수 자체가 너무 작아서 인덱스 읽는 것보다 풀 테이블 스캔하는게 더 빠른 경우(테이블이 1개의 페이지로 구성된 경우)
--> 세컨더리 인덱스 -> 클러스터드 인덱스 -> 테이블 접근 보다   해당 페이지 1개를 바로 읽는게 훨씬 빠름.
2. where, on 절에 인덱스를 이용할 수 있는 적절한 조건이 없는 경우
3. 인덱스 레인지 스캔 가능해도 옵티마이저가 판단한 조건 일치 레코드가 너무 많은 경우(인덱스의 B-Tree를 샘플링해서 조사한 통계 정보 기준)



InnoDB에서는 특정 테이블의 연속된 페이지가 읽히면 백그라운드 스레드에 의해 리드 어헤드 작업이 자동으로 시작된다.
리드 어헤드 작업이란 어떤 영역의 데이터가 앞으로 필요해지리라는 것을 예측해서 요청이 오기 전에 미리 디스크에서 읽어 버퍼 풀에 저장함
캐시 라인 처럼 한 번에 여러개의 페이지를 읽음. 최대 64개.
리드 어헤드는 풀 테이블 스캔에만 사용되는게 아니라 풀 인덱스 스캔에서도 이용됨.


병렬 처리
하나의 쿼리를 여러 스레드가 작업을 나누어 동시에 처리함.
MySQL 8.0에서는 아무런 WHERE 조건 없이 단순히 테이블의 전체 건수를 가져오는 쿼리만 병렬로 처리 가능.
아무리 병렬 처리 스레드 개수를 늘려도 서버의 CPU 코어 개수를 넘어서면 오히려 성능이 떨어질 수 있음.


ORDER BY 처리(Using filesort)
정렬을 처리하는 방법은 인덱스를 이용하는 방법과 쿼리가 실행될 때 Filesort라는 별도의 처리를 이용하는 방법이 있다.
인덱스 장점
insert, update, delete 쿼리 실행시 이미 인덱스가 정렬돼 있어서 순서대로 읽기만 하면 되므로 매우 빠름.
인덱스 단점
insert, update, delete 작업 시 부가적인 인덱스 추가/삭제 작업 필요하므로 느림.(B-Tree 특성임)
인덱스 떄문에 디스크 공간 더 많이 필요
--> 당연히 메모리에만 올리고 끝이 아니라 디스크에 저장 후 메모리에 불러오기 떄문에 저장 공간 필요
인덱스의 개수 늘어날수록 버퍼 풀을 위한 메모리 많이 필요.
Filesort 장점
인덱스 생성 안해도 됨. 정렬해야 할 레코드가 많이 않으면 메모리에서 처리 되므로 빠르다.
Filesort 단점
정렬 작업이 쿼리 실행 시 처리되므로 레코드가 많아질수록 느려짐.

소트 버퍼
MySQL은 정렬을 수행하기 위해 별도의 메모리 공간 사용. 이것이 소트 버퍼
버퍼의 크기는 정렬해야 할 레코드의 크기에 따라 변함. 최대 사용 가능한 소트 버퍼의 공간은 sort_buffer_size의 시스템 변수로 설정 가능.
소트 버퍼를 위한 메모리 공간은 쿼리 실행 완료시 즉시 반납.
레코드 개수가 소트 버퍼의 공간보다 크다면 문제가 생김.
주어진 메모리보다 많은 양의 데이터를 정렬해야 하다보니 디스크를 이용하게 된다. 주어진 레코드를 분할하여 정렬 후 디스크에 기록하고 다시 메모리에 올리고 다시 디스크에 기록하는 방식이다.
--> db 서버에서 많은 작업을 해야하는데 이럴바엔 was에서 정렬을 수행하는 방법은 어떨까?
소트 버퍼를 크게 설정하면 디스크를 덜 사용하니까 정렬 속도가 더 빨라질 것으로 생각할 수 있는데 실제 벤치마크 결과는 큰 차이가 없다.
리눅스 계열의 os에선 너무 큰 sort_buffer_size를 사용할 경우, 큰 메모리 공간 할당 때문에 성능이 훨씬 떨어질 수 있다.
일반적인 트랜잭션 처리용 소트 버퍼 크기는 56KB ~ 1MB 미만이 적절해 보임.
정렬을 위해 할당되는 소트 버퍼는 세션(로컬, 커넥션) 메모리 영역에 할당됨. 여러 클라이언트가 공유 못함. 정렬 작업이 많은 커넥션이 많아질수록 소트 버퍼로 소비되는 메모리가 많아짐... 운영체제의 메모리
부족 현상이 생길 수 있음.
대량 데이터의 정렬이 필요한 경우 해당 세션의 소트 버퍼만 일시적으로 늘려서 쿼리 실행 가능.

정렬 알고리즘
레코드를 정렬할 때 레코드 전체를 소트 버퍼에 담을지 또는 정렬 기준 컬럼만 소트 버퍼에 담을지에 따라 싱글 패스, 투 패스로 나뉨(공식 명칭 x)
MySQL 서버의 정렬 방식은 3가지가 있다.
1. <sort_key, rowId> : 정렬 키와 레코드의 로우 아이디만 가져와서 정렬       투 패스 방식
2. <sort_key, additional_fields> : 정렬 키와 레코드 전체를 가져와서 정렬, 레코드의 칼럼들은 고정사이즈로 메모리에 저장      싱글 패스 방식
3. <sort_key, packed_additional_fields> : 정렬 키와 레코드 전체를 가져와서 정렬, 레코드의 칼럼들은 가변 사이즈로 메모리에 저장     싱글 패스 방식

싱글 패스 정렬 방식
select 대상이 되는 컬럼 전부 소트 버퍼에 담았기 때문에 정렬 후 결과를 반환하면 끝.
--> 그냥 구조체 정렬이라 생각하면 됨

투 패스 정렬 방식
정렬 대상 컬럼과 프라이머리 키 값만 소트 버퍼에 넣기 때문에 정렬 후 정렬된 순서대로 프라이머리 키로 테이블을 읽어서 select할 컬럼 가져옴
테이블을 2번 읽어야 하기 때문에 싱글 패스보다 불합리함. 그래도 싱글보단 메모리를 덜 차지하기 때문에 무조건 싱글만 쓰진 않음.
최신 버전에선 일반적으로 싱글 패스 방식 사용.
다음의 경우 싱글 패스 사용 못하고 투 패스 사용
1. 레코드의 크기가 max_length_for_sort_data 시스템 변수에 설정된 값보다 클 때
2. BLOB, TEXT 타입의 컬럼이 select 대상에 포함될 때
--> 2의 경우 메모리가 매우 크기 때문에 빼고하는게 효율적인듯
싱글 패스 방식은 정렬 대상 레코드의 크기나 건수가 작은 경우 빠른 성능, 투 패스 방식은 정렬 대상 레코드의 크기나 건수가 상당히 많은 경우 효율적
select 쿼리에서 꼭 필요한 컬럼만 조회하는게 아닌 모든 컬럼(*)을 가져오도록 하는 경우가 있는데, 이는 정렬 버퍼를 몇 배에서 몇십 배까지 비효율적으로 사용할 가능성 크다.
꼭 필요한 컬럼만 작성하는게 좋음. 이는 꼭 정렬 버퍼에만 영향을 미치는 것이 아니라 임시 테이블이 필요한 쿼리에서도 영향을 미친다.
--> 머리속에 잘 새기자

정렬 처리 방법
쿼리에 order by가 사용되면 반드시 아래 3가지 방법 중 하나로 처리. 아래로 갈수록 처리 속도 떨어짐.
1. 인덱스 사용 정렬   실행 계획에 별도 표기 없음.
2. join에서 드라이빙 테이블(드라이빙 테이블 : 먼저 접근되는 테이블.)만 정렬  실행계획에 Using filesort 표시.
3. join에서 join 결과를 임시 테이블로 저장 후 정렬   실행계획에 Using temporary; Using filesort 표시.
--> 3번은 2번보다 결과가 많아질 수 있기 때문에 2번이 효율적

인덱스를 이용한 정렬
order by에 명시된 컬럼이 제일 먼저 읽는 테이블에 속하고, order by 순서대로 생성된 인덱스가 있어야함.
또한 where절에 첫 번째로 읽는 테이블의 컬럼에 대한 조건이 있다면 그 조건과 order by는 같은 인덱스를 사용해야함.
ex) where user.age > 20 order by user.age desc      user index age
B-Tree 계열의 인덱스가 아닌 해시 인덱스나 전문 검색 인덱스 등에서는 인덱스를 이용한 정렬 사용 못함.
--> 해시 인덱스 : 해시 테이블에서 정렬 가능? NO
여러 테이블이 조인되는 경우는 nested-loop(다중 for문)방식의 조인에서만 인덱스 정렬 가능.
--> nested-loop의 드라이빙 테이블에서 순서대로 읽는게 곧 정렬 순이다.
ex) 
select *
from product p
join product_status_type pst on p.id = pst.product_id
order by p.name
index product name 
이라면
product가 드라이빙 테이블이 되고 product는 name으로 정렬된 인덱스가 있기 때문에
해당 인덱스의 순서대로 접근하면서 product_status_type 테이블과 join을 하게 된다.
--> nested-loop가 아닌 hash-join에서는 인덱스를 이용한 정렬이 안될까?
도큐먼트를 보니 hash-join을 이용할 때 조건 중 하나가 사용 가능한 인덱스가 없을 경우라고 적혀있다.
그러니 인덱스를 이용한 정렬도 안될듯?
인덱스의 순서대로 읽기만 하면 될 뿐이니 MySQL 엔진에서 별도의 정렬을 위한 추가 작업 하지 않는다.
order by가 있든 없든 결과는 같다. 그래도 order by는 적어주는게 좋다.
그 이유는 어떠한 이유로 인해 실행 계획이 조금 변경되면 order by가 없어서 잘못된 결과가 나올 수 있다.
--> 실행 계획이 변경돼서 다른 인덱스를 타면 정렬 결과가 달라질 수 있음!
--> order by 적는다고 부하가 더 생기는게 아님. 적나 안적나 실헹 과정은 완전 동일! 그러니까 적어주자.
join이 사용된 쿼리의 실행 계획에 조인 버퍼가 사용되면 순서가 흐트러질 수 있기 때문에 주의해야 한다.

조인의 드라이빙 테이블만 정렬
일반적으로 조인이 수행되면 레코드의 건수가 많이 늘어남. 레코드 하나하나의 크기도 늘어남. 그래서 조인을 실행하기전에 드라이빙 테이블의 정렬을 수행한 다음 조인을 하는 방법도 있음.
이 방법으로 정렬이 되려면 드라이빙 테이블의 컬럼만으로 order by 절을 작성해야함.
ex) 
select *
from product p 
join product_status ps
on p.id = ps.product_id
where p.id between 1 and 100
order by p.name

index product_status product_id
이 예제는 order by p.name에 의해 인덱스 정렬이 불가능한 상태이다.
--> 쿼리를 잠깐 봤을 땐 p.id between 1 and 100에 포함되는 값을 product_status와 조인 후 나온 결과를 name으로 정렬할 느낌이다.
하지만 실제 결과는
1. p.id between 1 and 100에 포함되는 값을 인덱스를 통해 빠르게 구한다.
2. 1의 결과를 name으로 정렬한다.(filesort)
3. 2의 결과와 product_status를 product_status의 인덱스를 통해서 빠르게 조인한다.

임시 테이블을 이용한 정렬
2개 이상의 테이블을 조인해서 그 결과를 정렬해야 한다면 임시테이블이 필요할 수 있다.
위의 정렬에 정렬해야할 레코드가 많아서 느림.
ex)
select *
from product p
join product_status ps
on p.id = ps.product_id
where p.id between 1 and 100
order by ps.code

index product_status product_id
이 예제는 위와 비슷하지만 order by만 다름. 정렬 기준이 드리븐 테이블에 있기 떄문에 조인 결과로 정렬할 수 밖에 없음. 고로 임시 테이블에 올려야 한다.

정렬 처리 방법의 성능 비교
주로 웹 서비스용 쿼리에서는 order by와 함께 limit이 거의 필수로 사용되는 경향이 있음.
--> 페이지네이션
일반적으로 limit은 테이블이나 처리 결과의 일부만 가져오기 때문에 mysql 서버가 할 작업량을 줄임.
order by나 group by 같은 작업은 where 조건으로 처리한 레코드를 limit 건수만큼만 가져와서 처리할 수 없다.
--> where처리 후 order by, group by 작업을 해야하기 때문임.

스트리밍 방식
서버 쪽에서 처리할 데이터가 얼마인지 관계없이 조건에 일치하는 레코드가 검색될때마다 클라이언트로 전송해주는 방식.
이 방식으로 쿼리를 처리할 경우 클라이언트는 쿼리 쏘고 곧바로 원하는 데이터를 받는다. 물론 마지막 데이터는 언제 받을지 모름.(그다지 중요하지 않음)
--> 뭔가 영상 스트리밍 느낌.
--> 한번에 받는 방식이 아니기 때문에 뭔가 느낌이 커넥션을 계속 잡을 느낌. 그리고 찾는 족족 보낸다고 했으니까 네트워크 부하가 심할수도 있겠다.
클라이언트는 서버로부터 일치하는 데이터를 즉시 받을 수 있기 때문에 데이터 가공 작업 가능하다.
웹 서비스 같은 OLTP 환경에서는 쿼리의 요청부터 첫 번째 레코드 받기까지의 응답시간 중요. 쿼리가 많아도 빠른 응답 시간 보장.
스트리밍 + LIMIT은 실행 시간을 많이 줄여줌.

버퍼링 방식
order by, group by 같은 쿼리는 스트리밍 되는 것을 불가능하게 함.
--> 조회 + 추가 작업인데 추가 작업을 할 때 모든 조회 결과가 필요하므로 스트리밍 안되는 듯 함.
버퍼링 + LIMIT은 크게 도움이 되지 않는다. 네트워크로 전송되는 레코드의 건수는 줄일 수 있지만, MySQL 서버가 해야하는 작업은 변함 없음.
--> 네트워크로 전송하는 것은 system call이기 때문에 os 관점으로는 버퍼링 방식이 좋아보인다.. 암만 봐도 대용량 데이터는 스트리밍 보단 버퍼링 방식이 좋아보인다. 

스트리밍 처리 방식은 어떤 클라이언트 도구, API를 사용하느냐에 따라 방식에 차이가 있다.
JDBC 라이브러리에서 MySQL서버는 레코드마다 클라이언트에게 보내지만 JDBC는 MySQL 서버로부터 받은 레코드를 내부 버퍼에 차곡차곡 쌓아가다 마지막 레코드를 받을 때 어플리케이션에게 결과 전달함.
JDBC가 자체적으로 버퍼링하는 이유는 전체 처리시간이 짧고 MySQL 서버와의 통신 횟수가 적어 자원 소모 줄어들기 때문이다.
--> MySQL 서버와의 통신 횟수가 적어진다는 것은 받고 저장만 한다고 생각해야될까? 분명 매 레코드마다 MySQL서버에서 JDBC로 보내게 되는데... 스트리밍이나 버퍼링은 분명 처리되는 레코드는 동일하다. 
하지만 통신 횟수가 적어진다는 것은 같은 레코드 개수임에도 불구하고 뭔가 부가작업이 더 있다는걸로 보인다. JDBC에서 레코드를 받을 때마다 해야될 작업을 마지막에 일괄 처리할걸로 보인다. 더 자세하게 알아보고
싶지만 검색해야될 키워드를 잘 모르겠다... 구글링은 못하겠어서 직접 jdbctemplate의 query 부분 코드를 까봤는데 mysql connector로 연결되고 이쪽 코드 자체가 실제 쿼리를 쏴서 받는 핵심기능
을 담당하고 있는 것으로 보인다. NativeProtocol class의 readAllResults 메서드 코드를 보면 streamResults의 여부에 따라 남은 resultSet을 전부 가져오는지 아닌지로 되어있다.
코드를 보면서 알게된 소소한 사실은 resultSet의 native는 연결리스트로 구현 되어있다.(resultSet -> resultSet -> resultSet). streamResults가 false면 resultSet을 다 받을때까지 
MySQL서버로 계속 패킷을 날린다. 겁나게 복잡하긴 하다.... enableStreamingResults 메서드를 통해서 스트리밍 방식으로 바꿀 수 있다.(버퍼링 방식이 디폴트임)

1. 인덱스 사용 정렬   실행 계획에 별도 표기 없음.
2. join에서 드라이빙 테이블(드라이빙 테이블 : 먼저 접근되는 테이블.)만 정렬  실행계획에 Using filesort 표시.
3. join에서 join 결과를 임시 테이블로 저장 후 정렬   실행계획에 Using temporary; Using filesort 표시.
위의 3가지 방법 중 1번만 스트리밍 형태로 처리되고 나머지는 버퍼링 방식이다.
인덱스를 이용하면 LIMIT으로 제한된 건수만큼만 읽으면서 바로바로 클라이언트로 결과 전송 가능. 나머지는 레코드를 디스크로부터 읽고 정렬한 다음에야 LIMIT으로 제한된 건수만큼 클라이언트로 전송 가능하다.
인덱스를 사용하지 못하는 경우 필요한 모든 레코드를 디스크로부터 읽어서 정렬 후 LIMIT으로 제한된 건수만큼 자른다.

group by 처리
group by에 사용된 조건은 인덱스를 사용해서 처리될 수 없으므로 having 절을 튜닝하려고 인덱스를 생성하거나 고민할 필요 없음.
인덱스를 이용할 땐 차례대로 읽는 인덱스 스캔 방법과 인덱스를 껑충 껑충 건너 뛰면서 읽는 루스 인덱스 스캔이 있다.
인덱스 이용못할 땐 임시 테이블을 사용한다.(최악)

인덱스 스캔 방식의 group by(타이트 인덱스 스캔)
인덱스를 차례대로 읽으면서 그루핑 작업 수행.
인덱스를 통해 처리되더라도 그룹 함수(aggregation function)등의 그룹값을 처리하기 위해 임시테이블이 필요할 때가 있음.
이미 정렬된 인덱스를 읽는 것이므로 쿼리 실행 시점에 추가적인 정렬 작업이나 내부 임시 테이블 필요x
이러한 그루핑 방식을 사용하는 쿼리의 실행 계획은 extra 컬럼에 별도로 group by 관련 코멘트("Using index for group-by")나 임시 테이블 사용 또는 정렬 관련 코멘트("Using temporary, 
Using filesort")가 표시되지 않는다.
-->왜 그룹핑을할 때 정렬을 할까?
-->abbcaaaabbc를 그룹핑하기 위해서는 정렬을 통해 클러스터링을 해야 추가적인 메모리가 필요하지 않다고 생각. 여기서 추가적인 메모리라는 말은 데이터 외적으로 그룹핑을 위한 추가적인 메모리를 말함.
단순하게 정렬해서 aaaaabbbbcc를 만든다면 그룹핑하기 굉장히 수월해짐. 정렬이 아니라면 aaaaa bbbb cc를 어딘가에 저장을 해야함.

루스 인덱스 스캔 방식의 group by
인덱스의 레코드를 건너 뛰면서 필요한 부분만 읽음. 실행 계획의 extra 컬럼에 Using index for group-by 표시.
ex) select emp_no
    from salaries
    where from_date = `1985-03-01`
    group by emp_no
이고 인덱스는 (emp_no, from_date)
--> 잠깐 봤을 땐 인덱스 풀 스캔 돌 것 같다. 그 이유는 emp_no로 group by하기 때문.. 같은 emp_no에 대해서 from_date를 찾기 위해선 풀 스캔이 맞다고 생각됨.
위의 예제는 루스 인덱스 스캔을 탄다. 
위의 예제 실행 순서.
1. (emp_no, from_date) 인덱스를 차례대로 스캔하면서 emp_no의 첫 번째 유일한 값 찾아낸다. 그 값을 10001이라 하겠다.
2. emp_no가 10001인 것 중에서 from_date 값이 1985-03-01인 레코드만 가져온다. emp_no=10001 and from_date='1985-03-01' 조건으로 (emp_no, from_date) 인덱스를 검색하는 것과
흡사하다.
3. (emp_no, from_date) 인덱스에서 emp_no의 그다음 유니크한 값을 가져온다. 
--> 10001 1985-01-01
    10001 1985-02-01
    10001 1985-03-01 <-- 여기까지 탐색하고
    10001 1985-04-01
    10001 1985-09-01
    10002 1985-01-01 <-- 여기로 껑충 뛴다.
루스 인덱스 스캔 방식은 단일 테이블에 대해 수행되는 group by에만 사용가능. 또한 프리픽스 인덱스(컬럼 값의 앞쪽 일부만으로 생성된 인덱스)는 루스 인덱스 스캔 사용 불가.
인덱스 레인지 스캔은 유니크한 값이 많을수록 성능 좋음. 그러나 루스 인덱스 스캔은 유니크한 값이 적을수록 성능 향상. 루스 인덱스 별도의 임시 테이블 필요x.
-->(1000만개, 유니크한 키의 개수 900만) 테이블에서 특정한 값의 레인지를 찾는 것은 당연히 레인지 스캔이 빠르다.  하지만 (1000만개, 유니크한 키의 개수 100만) 테이블이라면 루스가 빠르다.
즉 루스 인덱스 스캔은 껑충 껑충 뛰는 범위를 늘려야 성능이 좋다.

임시 테이블을 사용하는 group by
ex) select e.last_name, AVG(s.salary)
    from employees e, salaries s
    where s.emp_no = e.emp_no
    group by e.last_name
위의 예제는 인덱스를 사용할 수 없기 때문에 using temporary를 사용한다.
--> e 테이블에서 group by를 하지만 s.slaray 컬럼으로 avg 연산을 하기 때문에 인덱스를 못탐.
MySQL 8.0 이전 버전까지는 group by가 사용된 쿼리는 그루핑 되는 컬럼을 기준으로 묵시적인 정렬까지 수행하지만 위의 쿼리는 using filesort가 표시되지 않았다.
8.0 이전 버전에서는 last_name으로 그룹핑을 하고 정렬까지 하므로 결과는 last_name정렬 순으로 나온다.
8.0에서는 group by가 필요한 경우 내부적으로 group by 절의 컬럼들로 구성된 유니크 인덱스를 가진 임시 테이블 생성해서 중복 제거와 집합 함수 연산(AVG)을 수행한다. 조인의 결과를 한 건씩 가져와
임시테이블에서 중복 체크 하면서 insert or update를 실행한다. 별도의 정렬 작업 없이 group by가 처리된다.
create temporary table ... (
    last_name varchar(16),
    salary int,
    unique index ux_lastname (last_name)
) 이런 임시 테이블을 생성한다.
--> select의 컬럼과 임시 테이블의 컬럼이 일치하는 것을 보면 딱 필요한 값들만 select에 넣어야 겠다는 생각이든다.
MySQL5.7 이전까지는 group by가 사용되면 자동으로 그루핑 컬럼 기준으로 정렬 되는데, 정렬이 필요하지 않은 경우라면 order by null을 넣어서 성능 향상 시킬 수 있다.


내부 임시 테이블 활용
일반적으로 MySQL 엔진이 사용하는 임시 테이블은 처음에는 메모리에 생성됐다가 테이블의 크기가 커지면 디스크로 옮겨진다. 특정 예외 케이스에는 바로 디스크에 생성됨.
--> using temporary를 이용하게 될 경우 레코드 수가 많아지면 메모리가 아닌 디스크로 옮겨지는 것을 고려하자.
임시 테이블은 다른 세션이나 다른 쿼리에서는 못 보고 사용 불가. 쿼리 처리가 완료되면 자동으로 삭제됨.
MySQL 8.0 이전 버전까지는 원본 테이블의 스토리지 엔진과 관계없이 임시 테이블이 메모리를 사용하게 되면 MEMORY 스토리지 엔진 사용, 디스크에 저장될 때는 MyISAM 스토리지 엔진 사용.
8.0 버전부터는 메모리는 TempTable 스토리지 엔진 사용, 디스크 임시테이블은 InnoDB 스토리지 엔진 사용함.

기존 MEMORY 스토리지 엔진은 VARBINARY나 VARCHAR 같은 가변 길이 타입을 지원하지 못하기 때문에 임시테이블이 메모리에 만들어지면 가변 길이 타입의 최대 길이만큼 메모리를 할당해서 사용
--> varchar 컬럼의 경우 실제 사용되는 범위는 극히 작은데 크게 설정한다면 비효율 직격타일듯.. 일부러 넉넉하게 많이 잡았는데 대강이라도 계산해서 잡아야할 듯 하다..

디스크에 임시 테이블이 만들어질 떄 사용되는 MyISAM 스토리지 엔진은 트랜잭션 지원x. 그래서 8.0부터 가변 길이 타입 지원하는 TempTable 스토리지 엔진 도입, MyISAM 대신 InnoDB 지원하도록 개선됨.

임시 테이블이 필요한 쿼리
1. order by와 group by에 명시된 컬럼이 다른 쿼리
--> group by의 컬럼으로 정렬한 상태인데 order by의 컬럼으로 정렬을 해야하니까 임시 테이블 필요.
2. order by나 group by에 명시된 컬럼이 조인의 순서상 첫 번째 테이블이 아닌 쿼리
--> 드라이빙 테이블의 컬럼이 아니라면 조인을 하고 정렬해야 하니까 임시 테이블 필요.
3. distinct와 order by가 동시에 쿼리에 존재하는 경우 또는 distinct가 인덱스로 처리되지 못하는 쿼리
4. union이나 union distinct가 사용된 쿼리(select_type 컬럼이 union result인 경우)
--> 결과를 합치고 중복을 제거해야 하므로 임시 테이블 필요.
5. 쿼리의 실행 계획에서 select_type이 derived인 쿼리
using temporary가 표시되지 않을 때도 임시테이블 사용 가능. 1 ~ 4까지의 쿼리 패턴은 유니크 인덱스를 가진 내부 임시 테이블 생성. 마지막 쿼리 패턴은 유니크 인덱스가 없는 내부 임시 테이블 생성.
일반적으로 유니크 인덱스가 있는 내부 임시 테이블이 그렇지 않은 쿼리보다 상당히 느리다.

8.0 이전 버전까지는 union all이 사용된 쿼리(select_type 컬럼이 union result인 경우)도 항상 내부 임시 테이블 생성함.
8.0 이후부턴 임시테이블 사용 안하도록 개선됨. union은 제외. 중복 제거해야하니깐~

임시 테이블이 디스크에 생성되는 경우
1. union이나 union all에서 select 되는 컬럼 중에서 길이가 512바이트 이상인 크기의 컬럼이 있는 경우
2. group by나 distinct 컬럼에서 512바이트 이상인 크기의 컬럼이 있는 경우
3. 메모리 임시 테이블의 크기가(MEMORY 스토리지 엔진에서) tmp_table_size 또는 max_heap_table_size 시스템 변수보다 크거나(TempTable 스토리지 엔진에서) temptable_max_ram 시스템 변수
값보다 큰 경우

실행 계획상에서 using temporary가 표시되면 임시 테이블 사용함. 하지만 메모리에서 처리됐는지 디스크에서 처리됐는지 모름. 또 몇개의 임시테이블이 사용됐는지 모름. using temporary가 한 번 표시됐다고
해서 임시 테이블을 하나만 사용한건 아님. 임시 테이블이 디스크에 생성됐는지 메모리에 생성됐는지 확인하려면 show session status like 'Created_tmp%'; 확인하면 된다.



고급 최적화
옵티마이져 옵션은 크게 조인 관련된 옵티마이저, 옵티마이저 스위치로 구분할 수 있다.
옵티마이저 옵션은 글로벌, 세션별로 설정 가능하다.

MRR과 배치 키 엑세스
MRR은 Multi Range Read의 줄임말. 매뉴얼에서는 DS-MRR(Disk Sweep)이라고도 한다.
드라이빙 테이블의 레코드 건별로 드리븐 테이블의 레코드를 찾으면 스토리지 엔진에서는 아무런 최적화를 할 수 없음.
이런 단점을 보완하기 위해 MySQL 서버는 조인 대상 테이블 중 하나로부터 레코드를 읽어서 조인 버퍼에 버퍼링한다. 
즉, 드라이빙 테이블의 레코드를 읽어서 드리븐 테이블과의 조인을 즉시 실행하지 않고 조인 대상을 버퍼링. 조인 버퍼에 레코드가 가득차면 비로소 MYSQL 엔진은 버퍼링된 레코드를 스토리지 엔진으로 
한 번에 요청한다. 스토리지 엔진은 읽어야 할 레코드들을 데이터 페이지에 정렬된 순서로 접근해서 디스크의 데이터 페이지 읽기를 최소화 함. 데이터 페이지가 버퍼 풀에 있어도 버퍼 풀의 접근 최소화 함.
--> 이런식으로 디스크, 메모리 접근을 최소화 시키나봄... 주먹구구식으로 매 레코드마다 요청 시 오버헤드가 크기 때문에 모아서 한번에 요청하는 방법. 특히 데이터 페이지에 정렬된 순서로 접근하기 때문에
지역성을 통한 이점도 가져갈 수 있음.
MRR을 응용해서 실행되는 조인 방식을 BKA(Batched Key Access)조인 이라고 함.
BKA 조인 최적화는 단점이 있어서 기본적으로 비활성화. 부가적인 정렬 작업이 필요해지면서 성능에 안 좋은 영향 끼칠 수 있음.

블록 네스티드 루프 조인
네스티드 루프 조인과의 큰 차이는 조인 버퍼 사용, 드라이빙 테이블과 드리븐 테이블이 어떤 순서로 조인 되었느냐의 차이다.
조인 알고리즘에서 Block이라는 단어가 사용되면 조인용으로 별도의 버퍼가 사용됐다는 것을 의미, 실행 계획에서 Using Join buffer 문구 표시됨.
어떤 방식으로도 드리븐 테이블의 풀 테이블 스캔이나 인덱스 풀 스캔을 피할 수 없다면 옵티마이저는 드라이빙 테이블에서 읽은 레코드를 메모리에 캐시한 후 드리븐 테이블과 메모리 캐시를 조인하는 형태로
처리한다.
--> 이때 드라이빙과 드리븐이 바뀔 수 있다. 예전에 product와 brand를 조인 했을 때 드라이빙이라 생각했던 product가 드리븐이 되었던 쿼리가 있었다. product는 30만건 brand는 4000건 정도였는데
드리븐이였던 brand가 풀 테이블 스캔이나 인덱스 풀 스캔이였나봄...

조인 버퍼 사용되는 과정
1. 드라이빙 테이블의 인덱스를 이용해 조건을 만족하는 레코드를 검색한다.
2. 조인에 필요한 나머지 컬럼을 테이블로부터 읽어서 조인 버퍼에 저장한다.
3. 드리븐 테이블의 조건을 만족하는 레코드를 검색한다.
4. 3번에서 검색된 결과를 2번의 캐시된 조인 버퍼의 레코드를 결합해서 반환한다.

일반적으로 조인이 수행된 후 가져오는 결과는 드라이빙 테이블의 순서에 의해 결정되지만, 조인 버퍼가 사용되는 조인에서는 결과의 정렬 순서가 흐트러질 수 있음.


