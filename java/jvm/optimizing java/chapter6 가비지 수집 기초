mark and sweep
말 그대로 표시하고 쓸어 담는다.
할당 됐지만, 아직 회수되지 않은 객체를 가리키는 포인터를 포함한 할당 리스트 사용.
알고리즘
1. 할당 리스트 순회하면서 마크 비트를 지운다.
2. GC 루트부터 살아 있는 객체를 찾는다.
3. 찾은 객체의 마크 비트를 세팅한다.
4. 할당 리스트 순회하면서 마크 비트 세팅 안된 객체를 찾는다.
  a. 힙에서 메모리를 회수해 프리 리스트에 되돌린다.
  b. 할당 리스트에서 객체를 삭제한다.
--> 정말 단순한 알고리즘이다.
--> 프리 리스트는 힙에서 비어있는 구간들을 리스트로 관리하는데 그 리스트를 말하는듯 하다.

압착
살아남은 객체들은 GC 사이클 마지막에 연속된 단일 영역으로 배열된다.
--> 단편화를 없애기 위한 압축
객체 쓰기가 가능한 여백의 시작점을 가리키는 포인터가 있다.
--> 프리 리스트의 head일까?

방출
수집 사이클의 마지막에 할당된 영역을 완전히 비우고 살아남은 객체는 모두 다른 메모리 영역으로 이동된다.
--> 이동 되면서 압축되는듯.


객체를 런타임에 표현하는 방법
핫스팟은 런타임에 oop라는 구조체로 자바 객체를 나타냄. oop는 object oriented programming이 아닌 ordinary object pointer이다.
oop는 참조형 지역 변수 안에 위치함. 자바 메서드의 스택 프레임으로부터 자바 힙을 구성하는 메모리 영역 내부를 가리킴.
oop를 구성하는 자료구조는 여러 가지가 있음. 그중 instanceOop는 자바 클래스의 인스턴스를 나타냄.
Mark 워드(인스턴스 관련 메타데이터를 가리키는 포인터)와 Klass 워드(클래스 메타데이터를 가리키는 포인터)로 시작됨.


