파일 이름은 tip이지만 삽질한 과정을 적는 곳임.



부하테스트시 설정한 값들이 제대로 실행 되는지 확인하자.
nginx의 로그를 확인했을 때 process가 30번대 이길래 프로세스가 30개 가량이 실행되는줄 알았지만 실행되는 프로세스 리스트를 확인해보니 5개 밖에 안떴고 저 30번대는 알고보니 번호였음..

웹서버에 리소스를 아무리 많이 줘도 먹통이 된다 싶으면 웹서버가 실행되고 있는 os의 max file 개수를 확인해보자.


부하테스트 시 어플리케이션에서 리소스가 충분함에도 불구하고 먹통이 된다면 포트를 확인해보자.
클라이언트와 서버를 로컬에서 테스트시 다량의 리퀘스트에 대한 포트 할당이 필요하다. 짧은 시간에 많은 리퀘스트를 보내는 부하테스트 특성상 포트가 모자르게 된다.(4way handshake 생각하면 됨)
이때 사용가능한 포트를 늘리던지 소켓을 재활용하는 방법을 이용하면 된다.
포트 늘리는 옵션
mac) net.inet.ip.portrange 참고
sysctl net.inet.ip.portrange.first -> 늘리면 됨
소켓 재활용
mac) sysctl net.inet.tcp.msl=15000 -> 1000
mac이랑 linux는 명령어가 다르므로 잘 확인해야함.

도커에 웹서버와 was를 올려서 부하테스트를 진행 했는데 도커 자체에 리소스를 적게 주다보니 처리속도가 느렸다. 도커 리소스도 확인해보자..

부하테스트시 htop을 이용해서 cpu가 고르게 잘 사용되는지 확인해보자.

로컬 도커 상에 웹서버를 띄우지 말고 직접 mac상에 띄우자. 도커 설정이 뭐가 있는줄 모르기 때문... 
--> 도커에서 mac으로 뺐는데 꽤 빨라짐. 뭔가 설정이 있나보다. 아니면 도커 내부로 연결하는 과정에 추가 연산이 있다고 생각됨.. 도커를 공부해야 알듯 함.

로드밸런싱을 했다면 모든 was로 리퀘스트가 잘 가는지 확인하자.




